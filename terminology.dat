;; -*- mode:emacs-lisp; -*-
;; Some workflow ideas:
;; - Use (require 'biblio) to create a bixtex file
;; - Convert it to JSON:
;; C:\Users\chauv\AppData\Roaming\npm\citation-js -i terminology.bib  -o terminology-bib
;; - Query/cleansing w. jq:
;; jq ".[].author[] | .given + \" \" + .family" terminology-bib.json

(require 'imenu-list)
(require 'cl-lib)	
(require 'company)

;; Define form
(setq 
 documents-directory "C:\\Users\\chauv\\Documents\\TERMINOLOGY\\"
 forms-file (expand-file-name "terminology-terms.dat" documents-directory))

(setq forms-field-sep "§")

(setq forms-number-of-fields
      (forms-enumerate
       '(terminology-term
         terminology-abbreviation
         terminology-domain
         terminology-synonym
         terminology-definition
         terminology-notes
         terminology-seealso
         terminology-foreign
         terminology-attention
	 )))

;; The format list.
(setq forms-format-list
      (list
       "====== Terminology ======\n\n"
       "Terme : "			terminology-term
       "\nAbrev. : "			terminology-abbreviation      
       "\nDomaine : "			terminology-domain
       "\n"
       
       "\nDéfinition : "		terminology-definition
       "\nNotes : "			terminology-notes
       "\nVoir aussi : "		terminology-seealso
       "\nÉquivalent étranger : "	terminology-foreign
       
       "\n\n====== Commentaire ======\n\n"
       terminology-attention
       ))

;;----------------------------------------------------------------------
;; Cosma generation
(defvar terminology-cosma-zero-id 240000 "Start beyond 23:59:59 for id generation")
(defvar terminology-temp-out-buffer "*OUT-CSV*")
(defconst terminology-cosma-yaml-template "---
title: %s
id: %s
type: %s
tags:
  - terminology
%s---

"
  "Template for root node and yaml headers of individual .md files.")

(defun terminology-cosma--newid ()
  "Generates a new unique id from the current day and incremented
global counter."
  (cl-incf terminology-cosma-zero-id)
  (let* ((now (decode-time (current-time)))
	 (str (format "%6d" terminology-cosma-zero-id))
	 (end (format "%2s%2s%2s" (substring str 0 2) (substring str 2 4) (substring str 4 6)))
	)
    (format "%04d%02d%02d%6s" (nth 5 now) (nth 4 now) (nth 3 now) end)))

(defun terminology--parse-current-row ()
  (let ((fields (csv-parse-current-row))
	(newid (terminology-cosma--newid))
	(idfields '(("PERSONNE" . "\n\n## Qui est-ce ?\n\n%s\n")))
	)
    (with-current-buffer (get-buffer-create terminology-temp-out-buffer)
      (erase-buffer)
      (insert (format terminology-cosma-yaml-template
		      (car fields)
		      newid
		      (caddr fields)
		      "" ;; Tags
		      )
	      (if (assoc (caddr fields) idfields)
		  (format (cdr (assoc (caddr fields) idfields)) (car (cddddr fields)))
		(format "\n\n## Définition\n\n%s\n" (car (cddddr fields))))
	      (if (not (string= "" (cadr (cddddr fields))))
		  (format "\n\n## Note\n\n%s\n" (cadr (cddddr fields))) "")
	      (if (not (string= "" (caddr (cddddr fields))))
		  (format "\n\n## Voir aussi\n\n%s\n" (caddr (cddddr fields))) "")
	      (if (not (string= "" (cadddr (cddddr fields))))
		  (format "\n\n## Équivalent étranger\n\n<i>%s</i>\n" (cadddr (cddddr fields))) "")
	      (if (and (cddddr (cddddr fields))
		       (not (string= "" (car (cddddr (cddddr fields))))))
		  (format "<hr>\n\n## Commentaire\n\n%s\n" (car (cddddr (cddddr fields)))) "")
	      )
      )
    (cons (car fields) newid)
    )
  )

(defun terminology--patch-links (count title-id)
  (dotimes (i (1- count))
    (let ((fni (format "out/term_%d.md" (1+ i)))
	  )
      (with-current-buffer (get-buffer-create terminology-temp-out-buffer)
	(erase-buffer)
	(insert-file-contents fni)
	;; Patch multi-lines
	(replace-string-in-region "\^k" "\n" (point-min) (point-max))
	;; Patch links
	(dolist (tid title-id)
	  (replace-string-in-region (format "%s]]" (car tid)) (format "%s|%s]]" (cdr tid) (car tid)) (point-min) (point-max))
	  )
	(write-region nil nil fni)
	)
      )
    )
  )
			   
(defun terminology--generate-md-files () (interactive)
       (set-language-environment "UTF-8")
       (let ((count 1)
	     (coding-system-for-write 'utf-8)
	     (title-id nil)
	     )
	 ;; Create as many .md files as records with new uuids
	 (with-current-buffer (get-buffer (file-name-nondirectory forms-file))
	   (csv-mode)
	   (customize-set-variable 'csv-separators '("§"))
	   (save-excursion
	     (goto-char (point-min))
	     (while (not (eobp))
	       (setq title-id (cons (terminology--parse-current-row) title-id))
	       (with-current-buffer (get-buffer terminology-temp-out-buffer)
		 (write-region nil nil (format "out/term_%d.md" count)))
	       (setq count (1+ count))
	       (forward-line)
	       )
	     )
	   )
	 ;; Revisit all generated files and replace title-based links with uuid-based ones
	 (terminology--patch-links count title-id)
	 ))

;;----------------------------------------------------------------------

(defvar terminology-form--terms nil)

(defun terminology-form--json-terms ()
  (interactive)
  ;; Nodes
  (with-current-buffer (get-buffer-create "*TERMS*")
    (erase-buffer)
    (insert "{ nodes: [")
    (dolist (term terminology-form--terms)
      (insert (format "\n{ id: \"%s\", group: %d}," (car term) 1))
      )
    (delete-char -1)
    (insert "\n],\n")
    )
  ;; Links
  (with-current-buffer (get-buffer-create "*TERMS*")
    (insert "links: ["))
  (let ((cur forms--current-record))
    (save-excursion
      (dotimes (n forms--total-records)
	(forms-jump-record (1+ n))
	(let* ((the-record (forms--parse-form))
	       (source (car the-record))
	       (targets (split-string (nth 6 the-record) "[,\\.]" t " " ))
	       )
	  (with-current-buffer (get-buffer-create "*TERMS*")
	    (dolist (term targets)
	      (if (assoc term terminology-form--terms)
		  (insert (format "\n{source:\"%s\", target:\"%s\", value:1},"
				  source
				  term))))
	    )
	  )
	)
      (forms-jump-record cur)
      ))
  (with-current-buffer (get-buffer-create "*TERMS*")
    (delete-char -1)
    (insert "]}\n"))

  )
  
;;----------------------------------------------------------------------
;; Create a CAPF for company-mode
(defun terminology-form--backend (command &optional arg &rest ignored)
  
  (cl-case command
    (interactive (company-begin-backend 'terminology-form--backend))
    (prefix (and (eq major-mode 'forms-mode)
                 (company-grab-symbol)))
    (candidates
     (cl-remove-if-not
      (lambda (c) (string-prefix-p arg c))
      (mapcar #'car terminology-form--terms)))
    )
  )

(add-to-list 'company-backends 'terminology-form--backend)


;; Provide content to imenu-list
(defun terminology-form--index-special (index-name index-position)
  (forms-jump-record index-position))

(defun terminology-form--update-index ()
  (let ((alist '()))
    (setq terminology-form--terms
	  (dotimes (n forms--total-records alist)
	    (forms-jump-record (1+ n))
	    (let ((the-record (forms--parse-form)))
	      (push (list (car the-record) (1+ n) #'terminology-form--index-special) alist)
	      )
	    )
	  )
    (setq terminology-form--terms (cl-sort terminology-form--terms 'string-lessp :key 'car))
    )
  )
  
(defun terminology-form--create-index ()
  (let ((current-record forms--current-record))
    (save-excursion
      (terminology-form--update-index))
    (forms-jump-record current-record))
  terminology-form--terms
  )

;; Install hooks, advises and globales

(setq
 imenu-create-index-function	#'terminology-form--create-index
 forms-mode-hook		(lambda ()
				  ;; Abbreviations from config.yml for DOMAINS
				  (define-mode-abbrev "per" "PERSONNE")
				  (define-mode-abbrev "pol" "POLITIQUE")
				  (define-mode-abbrev "geo" "GÉOPOLITIQUE")
				  (define-mode-abbrev "soc" "SOCIOÉCONOMIE")
				  (define-mode-abbrev "psy" "PSYCHOLOGIE")
				  (abbrev-mode)
				  ;; Company-mode
				  (setq company-require-match nil)
				  (company-mode)
				  ;; Imenu list of terms
				  (imenu-list)) 
 forms-write-file-filter	#'imenu-list-refresh
 )

;;----------------------------------------------------------------------


